[supervisord]
nodaemon=false

{% if supervisor_webserver %}
[inet_http_server]
port={{ supervisor_webserver_port }}
{% if supervisor_webserver_username %}
username={{ supervisor_webserver_username }}
password={{ supervisor_webserver_password }}
{% endif %}
{% endif %}

{% if supervisor_manage_cron %}
[program:cron]
user            = root
command         = /usr/sbin/cron -f
autostart       = {{ supervisor_cron_autostart }}
autorestart     = true
{% endif %}

{% if supervisor_manage_autofs %}
[program:autofs]
user            = root
command         = /usr/sbin/automount -f
autostart       = {{ supervisor_autofs_autostart }}
autorestart     = true
redirect_stderr = true
stdout_logfile  = /var/log/autofs.log
{% endif %}

{% if supervisor_manage_slurm %}
[program:munge]
user=root
# In VMs the chown seems to be needed, in containers the mkdir.
command=/bin/bash -c "mkdir -p /var/run/munge && chown -R root:root /var/run/munge && /usr/sbin/munged -f -F"
redirect_stderr = true
priority        = 100
stopasgroup     = true

[program:slurmctld]
user=root
command=/bin/bash -c "/usr/bin/python /usr/sbin/configure_slurm.py && /usr/sbin/slurmctld -D -L {{ supervisor_slurm_config_dir }}/slurmctld.log"
redirect_stderr=true
autostart       = {{ supervisor_slurm_autostart }}
autorestart     = true
priority        = 200
stopasgroup     = true

[program:slurmd]
user=root
command=/usr/sbin/slurmd -D -L {{ supervisor_slurm_config_dir }}/slurmd.log
autostart       = {{ supervisor_slurm_autostart }}
redirect_stderr = true
autorestart     = true
priority        = 300
{% endif %}

{% if supervisor_manage_condor %}
[program:condor]
user=root
command=condor_master -f -t
redirect_stderr = true
autostart       = {{ supervisor_condor_autostart }}
autorestart     = true
priority        = 100
{% endif %}


{% if supervisor_manage_postgres %}
{% if ansible_virtualization_type != "docker" %}
[program:pre_postgresql]
user            = root
startsecs       = 0
command         = /bin/bash -c "install -d -m 2775 -o postgres -g postgres /var/run/postgresql"
{% endif %}

[program:postgresql]
user            = postgres
command         = /usr/lib/postgresql/{{ postgresql_version }}/bin/postmaster {{ supervisor_postgres_options }}
process_name    = %(program_name)s
stopsignal      = INT
autostart       = {{ supervisor_postgres_autostart }}
autorestart     = true
redirect_stderr = true
priority        = 100
{% endif %}

{% if supervisor_manage_proftp %}
[program:proftpd]
{% if proftpd_nat_masquerade %}
command         = bash -c " export MASQUERADE_ADDRESS={{ proftpd_masquerade_address }} && /usr/sbin/proftpd -n -c {{ proftpd_conf_path }}"
{% else %}
command         = /usr/sbin/proftpd -n -c {{ proftpd_conf_path }}
{% endif %}
autostart       = {{ supervisor_proftpd_autostart }}
autorestart     = true
stopasgroup     = true
killasgroup     = true
{% endif %}

{% if supervisor_manage_nginx %}
[program:nginx]
command         = /usr/sbin/nginx
directory       = /
umask           = 022
autostart       = true
autorestart     = unexpected
startsecs       = 5
exitcodes       = 0
user            = root
priority        = 200
{% endif %}

{% if supervisor_manage_toolshed %}
[program:toolshed]
command         = {{ galaxy_venv_dir }}/bin/gunicorn 'tool_shed.webapp.fast_factory:factory()' --config python:galaxy.web_stack.gunicorn_config --worker-class galaxy.webapps.galaxy.workers.Worker --preload --workers 1 --bind 127.0.0.1:{{ galaxy_toolshed_port }} --timeout 600 --log-file {{ galaxy_logs_dir }}/toolshed.log --pid {{ galaxy_logs_dir }}/toolshed.pid --pythonpath lib
directory       = {{ galaxy_server_dir }}
process_name    = toolshed
umask           = 022
autostart       = true
autorestart     = true
environment     = PATH={{ galaxy_venv_dir }}:{{ galaxy_venv_dir }}/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin,PYTHONPATH=lib,TOOL_SHED_CONFIG_FILE={{ galaxy_toolshed_config_file }}
startsecs       = {{ supervisor_galaxy_startsecs }}
user            = {{ galaxy_user_name }}
startretries    = {{ supervisor_galaxy_startretries }}
{% endif %}

{% if supervisor_manage_docker %}
[program:docker]
directory       = /
{% if docker_legacy %}
command         = /usr/bin/docker daemon --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 -s {{ docker_storage_backend }}
{% else %}
command         = /usr/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 -s {{ docker_storage_backend }}
{% endif %}
autostart       = {{ supervisor_docker_autostart }}
autorestart     = {{ supervisor_docker_autorestart }}
user            = root
startsecs       = 5
redirect_stderr = true
{% endif %}

{% if supervisor_manage_rabbitmq %}
[program:rabbitmq]
command         = /bin/sh /usr/local/bin/rabbitmq.sh
user            = root
autostart       = {{ supervisor_rabbitmq_autostart }}
autorestart     = true
{% endif %}

{% if supervisor_manage_redis %}
[program:redis]
command         = /usr/bin/redis-server /etc/redis/redis.conf
user            = root
autostart       = {{ supervisor_redis_autostart }}
autorestart     = true
{% endif %}

{% if supervisor_manage_flower %}
[program:flower]
command         = {{ galaxy_venv_dir }}/bin/celery --broker={{ flower_broker_url }} --app {{ flower_app_name }} flower --conf={{ flower_conf_path }} --log_file_prefix={{ flower_log }}
directory       = {{ galaxy_server_dir }}
umask           = 022
autostart       = {{ supervisor_flower_autostart }}
autorestart     = true
startsecs       = 10
user            = {{ galaxy_user_name }}
environment     = PATH={{ galaxy_venv_dir }}:{{ galaxy_venv_dir }}/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin,PYTHONPATH=lib,GALAXY_CONFIG_FILE={{ galaxy_config_file }}
{% endif %}
