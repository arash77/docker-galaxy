import sys
import yaml
import argparse

def modify_yaml(file_path, key_path, new_value):
    # Load the YAML file
    with open(file_path, 'r') as file:
        data = yaml.safe_load(file)
    
    # Split the key_path by '.' to access nested keys
    keys = key_path.split('.')
    
    # Traverse the dictionary to reach the correct key
    temp = data
    for key in keys[:-1]:
        if key in temp:
            temp = temp[key]
        else:
            print(f"Key path '{'.'.join(keys)}' does not exist in {file_path}. No update made.")
            return
    
    # Check if the last key exists and update its value
    if keys[-1] in temp:
        temp[keys[-1]] = yaml.safe_load(new_value)
        # Write the updated data back to the YAML file
        with open(file_path, 'w') as file:
            yaml.dump(data, file, default_flow_style=False)
        print(f"Updated {key_path} to {new_value} in {file_path}")
    else:
        print(f"Key '{keys[-1]}' does not exist in {file_path}. No update made.")

def main():
    # Setup argparse for handling -h/--help and arguments
    parser = argparse.ArgumentParser(description="Update a YAML file by modifying an existing key's value.")
    
    # Positional arguments
    parser.add_argument("file_path", help="The path to the YAML file")
    parser.add_argument("key_path", help="The dot-separated key path (e.g., 'gravity.gunicorn.workers')")
    parser.add_argument("new_value", help="The new value to set for the specified key")

    # Parse the arguments
    args = parser.parse_args()

    # Modify the YAML file using the provided arguments
    modify_yaml(args.file_path, args.key_path, args.new_value)

if __name__ == "__main__":
    main()
